class Node {
  constructor(val) {
        this.val = val;
	this.next = null;
  }
}

class SinglyLinkedList {
  constructor() {
         this.head = null;
	 this.tail = null;
	 this.length = 0;
	}
  push(val) {
    let newNode = new Node(val);
    if (this.head === null) {
      this.head = newNode;
      this.tail = this.head;
    } else {
      this.tail.next = newNode;
      this.tail = newNode;
    }
    this.length ++;
    return this;
  }
  pop() {
    if (this.head === null) return undefined;
    let prev = null;
    let current = this.head;
    while (current.next) {
      prev = current;
      current = current.next;
    }
    this.tail = prev;
    this.tail.next = null;
    this.length --;
    if (this.length === 0) {
      this.head = null;
      this.tail = null;
    }
    return current;
  }
  shift() {
    if (this.head === null) return undefined;
    let currHead = this.head;
    this.head = currHead.next;
    this.length --;
    if (this.length === 0) this.tail = null;
    return currHead;
  }
  unshift(val) {
    let newNode = new Node(val);
    if (this.head === null) {
      this.head = newNode;
      this.tail = this.head;
    } else {
      newNode.next = this.head;
      this.head = newNode;
    }
    this.length ++;
    return this;
  }
  get(index) {
    if (index < 0 || index >= this.length) return null;
    let counter = 0;
    let node = this.head
    while (counter !== index) {
      counter ++;
      node = node.next
    }
    return node;
  }
  set(index, val) {
    let nodeAtIdx = this.get(index);
    if (!nodeAtIdx) return false;
    nodeAtIdx.val = val;
    return true;
  }
}
